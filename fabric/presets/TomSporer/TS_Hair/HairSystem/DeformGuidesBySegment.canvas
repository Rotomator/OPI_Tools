{
  "objectType" : "Func",
  "metadata" : {
    "uiTextColor" : "{\n  \"r\" : 20,\n  \"g\" : 20,\n  \"b\" : 20\n  }",
    "uiNodeColor" : "{\n  \"r\" : 121,\n  \"g\" : 134,\n  \"b\" : 143\n  }"
    },
  "title" : "DeformGuidesBySegment",
  "ports" : [
    {
      "objectType" : "ExecPort",
      "name" : "exec",
      "nodePortType" : "IO",
      "defaultValues" : {
        "Execute" : {}
        },
      "execPortType" : "IO",
      "typeSpec" : "Execute"
      },
    {
      "objectType" : "ExecPort",
      "name" : "hair",
      "nodePortType" : "IO",
      "defaultValues" : {
        "TS::HairSystem" : null
        },
      "execPortType" : "IO",
      "typeSpec" : "TS::HairSystem"
      },
    {
      "objectType" : "ExecPort",
      "name" : "indices",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Integer[]" : []
        },
      "execPortType" : "In",
      "typeSpec" : "Integer[]"
      }
    ],
  "blocks" : [
    {
      "objectType" : "ExecBlock",
      "metadata" : {
        "uiGraphPos" : "{\"x\":0.0,\"y\":0.0}"
        },
      "name" : "deformPerSegment",
      "ports" : [
        {
          "objectType" : "ExecBlockPort",
          "name" : "base",
          "nodePortType" : "In",
          "outsidePortType" : "In",
          "typeSpec" : "TS::HairGuide"
          },
        {
          "objectType" : "ExecBlockPort",
          "name" : "segment",
          "nodePortType" : "In",
          "outsidePortType" : "In",
          "typeSpec" : "Vec3"
          },
        {
          "objectType" : "ExecBlockPort",
          "name" : "pos",
          "nodePortType" : "In",
          "outsidePortType" : "In",
          "typeSpec" : "Vec3"
          },
        {
          "objectType" : "ExecBlockPort",
          "name" : "normal",
          "nodePortType" : "In",
          "outsidePortType" : "In",
          "typeSpec" : "Vec3"
          },
        {
          "objectType" : "ExecBlockPort",
          "name" : "color",
          "nodePortType" : "In",
          "outsidePortType" : "In",
          "typeSpec" : "Color"
          },
        {
          "objectType" : "ExecBlockPort",
          "name" : "vertexIdx",
          "nodePortType" : "In",
          "outsidePortType" : "In",
          "typeSpec" : "Integer"
          },
        {
          "objectType" : "ExecBlockPort",
          "name" : "vertexRatio",
          "nodePortType" : "In",
          "outsidePortType" : "In",
          "typeSpec" : "Scalar"
          },
        {
          "objectType" : "ExecBlockPort",
          "name" : "vertexCount",
          "nodePortType" : "In",
          "outsidePortType" : "In",
          "typeSpec" : "Integer"
          },
        {
          "objectType" : "ExecBlockPort",
          "name" : "guideIdx",
          "nodePortType" : "In",
          "outsidePortType" : "In",
          "typeSpec" : "Integer"
          },
        {
          "objectType" : "ExecBlockPort",
          "name" : "guideCount",
          "nodePortType" : "In",
          "outsidePortType" : "In",
          "typeSpec" : "Integer"
          },
        {
          "objectType" : "ExecBlockPort",
          "name" : "resultSegment",
          "nodePortType" : "Out",
          "outsidePortType" : "Out",
          "typeSpec" : "Vec3"
          }
        ],
      "defaultExec" : {
        "objectType" : "Graph",
        "metadata" : {
          "uiGraphPan" : "{\n  \"x\" : 418.0,\n  \"y\" : 3.0\n  }"
          },
        "title" : "",
        "ports" : [],
        "fixedPorts" : [
          {
            "objectType" : "ExecFixedPort",
            "name" : "base",
            "nodePortType" : "Out",
            "outsidePortType" : "In"
            },
          {
            "objectType" : "ExecFixedPort",
            "name" : "segment",
            "nodePortType" : "Out",
            "outsidePortType" : "In"
            },
          {
            "objectType" : "ExecFixedPort",
            "name" : "pos",
            "nodePortType" : "Out",
            "outsidePortType" : "In"
            },
          {
            "objectType" : "ExecFixedPort",
            "name" : "normal",
            "nodePortType" : "Out",
            "outsidePortType" : "In"
            },
          {
            "objectType" : "ExecFixedPort",
            "name" : "color",
            "nodePortType" : "Out",
            "outsidePortType" : "In"
            },
          {
            "objectType" : "ExecFixedPort",
            "name" : "vertexIdx",
            "nodePortType" : "Out",
            "outsidePortType" : "In"
            },
          {
            "objectType" : "ExecFixedPort",
            "name" : "vertexRatio",
            "nodePortType" : "Out",
            "outsidePortType" : "In"
            },
          {
            "objectType" : "ExecFixedPort",
            "name" : "vertexCount",
            "nodePortType" : "Out",
            "outsidePortType" : "In"
            },
          {
            "objectType" : "ExecFixedPort",
            "name" : "guideIdx",
            "nodePortType" : "Out",
            "outsidePortType" : "In"
            },
          {
            "objectType" : "ExecFixedPort",
            "name" : "guideCount",
            "nodePortType" : "Out",
            "outsidePortType" : "In"
            },
          {
            "objectType" : "ExecFixedPort",
            "name" : "resultSegment",
            "nodePortType" : "In",
            "outsidePortType" : "Out"
            }
          ],
        "extDeps" : {},
        "nodes" : [],
        "connections" : {
          "segment" : [
            "resultSegment"
            ]
          }
        }
      }
    ],
  "extDeps" : {
    "TS_Hair" : "*"
    },
  "presetGUID" : "CD4206CFAB7C20E7316C8CB08A5B2A67",
  "code" : "dfgEntry {
  if(hair == null)
    return;

  Integer idxs[] = indices.clone();
  if(idxs.size() == 0)
  {
    for(Size i=0;i<hair.guides.size();i++)
    {
      idxs.push(i);
    }
  }

  Vec3 segments[];
  for(Size i=0;i<idxs.size();i++)
  {
    Integer idx = idxs[i];
    if(!hair.guides[idx].isValid())
      continue;
    segments.resize(hair.guides[idx].points.size()-1);
    for(Size j=1;j<hair.guides[idx].points.size();j++)
    {
      segments[j-1] = hair.guides[idx].points[j] - hair.guides[idx].points[j-1];
    }
    for(Size j=0;j<segments.size();j++)
    {
      Float32 ratio = Float32(j) / Float32(hair.guides[idx].points.size() - 1);
      segments[j] = dfgPullBlockPort('deformPerSegment.resultSegment', 
        hair.guides[idx], 
        segments[j],
        hair.guides[idx].points[j+1],
        hair.guides[idx].normal,
        hair.guides[idx].color,
        j,
        ratio,
        hair.guides[idx].points.size(),
        idx, hair.guides.size());
    }
    for(Size j=1;j<hair.guides[idx].points.size();j++)
    {
      hair.guides[idx].points[j] = hair.guides[idx].points[j-1] + segments[j-1];
    }
  }
}
"
  }